# 
AWSTemplateFormatVersion: '2010-09-09'

Parameters:

  EnvironmentName:
    Type: String
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3a.nano
    AllowedValues:
    - m4.large
    - m5.large
    - t3.nano
    - t3.micro
    - t3.small
    - t3.medium
    - t3.large
    - t3.xlarge
    - t3.2xlarge
    - t3a.nano
    - t3a.micro
    - t3a.small
    - t3a.medium
    - t3a.large
    - t3a.xlarge
    - t3a.2xlarge
  AMIId:
    Type : 'AWS::SSM::Parameter::Value<String>'
    Default: JenkinsAMIId

Mappings: 
  Linux2Map: 
    us-east-1: "ami-0323c3dd2da7fb37d"
    us-east-2: "ami-0f7919c33c90f5b58"
    us-west-1: "ami-06fcc1f0bc2c8943f"
    us-west-2: "ami-0d6621c01e8c2de2c"
    eu-west-1: "ami-06ce3edf0cff21f07"
    eu-west-2: "ami-01a6e31ac994bbc09"

  UbuntuMap:
    us-east-1: "ami-085925f297f89fce1"
    us-east-2: "ami-07c1207a9d40bc3bd"
    us-west-1: "ami-0f56279347d2fa43e"
    us-west-2: "ami-003634241a8fcdec0"
    eu-west-1: "ami-0dad359ff462124ca"  # V20.04 LTS
    eu-west-2: "ami-0917237b4e71c5759"  # V20.04 LTS

Resources:

  MyInstance:
    Type: AWS::EC2::Instance
    # CreationPolicy:
    #   ResourceSignal:
    #     Timeout: PT10M
    Properties:
      ImageId: !Ref AMIId
      SecurityGroupIds: 
        - !Ref MySecurityGroup
      InstanceType: !Ref 'InstanceType'
      KeyName: automation

      # Tag the volume - seems long winded but couldn't find an easy way!
      # UserData:
      #   Fn::Base64:
      #     !Sub |
      #       #!/bin/bash -xe
      #       aws ec2 create-tags --resources $(aws ec2 describe-volumes --filters \
      #       Name=attachment.instance-id,Values=$(curl -s http://169.254.169.254/latest/meta-data/instance-id) \
      #       --query 'Volumes[*].[VolumeId]' --region=eu-west-2 --out text | cut -f 1) --tags \
      #       Key=Name,Value=${EnvironmentName}-Vol --region eu-west-2;
      #       /opt/aws/bin/cfn-signal --exit-code 0 --resource MyInstance --region ${AWS::Region} --stack ${AWS::StackName};
      Tags:
        -
          Key: Name
          Value: !Sub ${EnvironmentName}-Instance
        -
          Key: Backup1357
          Value: Test

  MyCustomResource:
    DependsOn: MyInstance
    Type: AWS::CloudFormation::CustomResource
    Properties: 
      ServiceToken: arn:aws:lambda:eu-west-2:386747223641:function:test1-AMICreateFunction-1KN2II58FB3W8

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH Ingress
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

  # AMICreateFunction:
  #   Type: AWS::Lambda::Function
  #   Properties: 
  #     Code: 
  #       S3Bucket: cfn-demo-ianp
  #       S3Key: amicreate.zip
  #     Description: "Lambda to create ami from instance on stack delete"
  #     Handler: amicreate.lambda_handler
  #     ReservedConcurrentExecutions: 1
  #     Role: !GetAtt LambdaExecutionRole.Arn
  #     Runtime: python3.8
  #     Tags:
  #       -
  #         Key: Name
  #         Value: !Sub ${EnvironmentName}-Lambda
  #     Timeout: 15

  # LambdaExecutionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #       - Effect: Allow
  #         Principal:
  #           Service:
  #           - lambda.amazonaws.com
  #         Action:
  #         - sts:AssumeRole
  #     Path: "/"
  #     Policies:
  #     - PolicyName: Demo-LambdaPolicy
  #       PolicyDocument:
  #         Version: '2012-10-17'
  #         Statement:
  #         - Effect: Allow
  #           Action:
  #           - logs:CreateLogGroup
  #           - logs:CreateLogStream
  #           - logs:PutLogEvents
  #           Resource: arn:aws:logs:*:*:*
  #         - Effect: Allow
  #           Action:
  #           - ec2:DescribeInstances
  #           - ec2:CreateTags
  #           - ec2:CreateImage
  #           - ssm:PutParameter
  #           Resource: "*"

# Outputs:
#   LambdaArn:
#     Value: !GetAtt AMICreateFunction.Arn