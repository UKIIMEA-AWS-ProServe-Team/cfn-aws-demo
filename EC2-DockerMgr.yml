# This will create a Docker Manager Node
AWSTemplateFormatVersion: "2010-09-09"
Description: "Docker Manager Node"

Parameters:
  MgrENI:
    Description: Static private IP address for Mgr Node
    Type: String
  EnvironmentName:
    Type: String

Resources:
  SwarmJoinCmd:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: "Param to store command to join worker node to Docker Swarm"
      Name: !Sub ${EnvironmentName}-SwarmJoinCmd
      Tier: Standard
      Type: String
      Value: "Temp value because null not accepted"
      Tags:
        Name: !Sub ${EnvironmentName}-SwarmJoinCmd

  DockerMgr:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    Properties:
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref MgrENI
          DeviceIndex: 0
      IamInstanceProfile:
        !Ref MyProfile
      ImageId: ami-0389b2a3c4948b1a0
      InstanceType: t3a.small
      KeyName: automation
      CreditSpecification:
        CPUCredits: standard
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum install -y docker jq;
            systemctl start docker;
            echo $(docker swarm init --advertise-addr 10.192.10.20) >> /tmp/dockerjoin.txt;
            cat /tmp/dockerjoin.txt | sed 's/.*command: //' | sed 's/ To add.*$//' >> /tmp/join.txt;
            aws ssm put-parameter --name /SwarmJoinCmd --value "$(cat /tmp/join.txt)" --type String --region eu-west-2 --overwrite;
            usermod -aG docker ec2-user;
            echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDIjrLOiWlu4joGudg97UgQy9rH/jPfLQBb4etkLtmXzJVFUDlrPFIPVe7KcCKuq8mRQIpj9WfYHuqYwjVMLDwBTY4MEdLYcIsu9gk0prGpQ9dGW7jQlzeqvncO61NCDiP7JUpGg8PLTbSjcMsTsZAsYLeLWe+2Q/z6zXgnVIMTdNCnxE6Bp2/llz90vcY/4RhN7lHfoi56wUnD3E1MOe7CdQOU1DIzCc8KjasY622OYhc4ZLzO7KsctePQgaafel1BewXKaUgs8/N0xyXtaNOja6o3nxvz3hPXcZj576ob9P21OrhCQMy8fjcZajVckC/ZA9vQQ76cxYM8lJjbJorv ubuntu@ip-172-31-21-255" \
            >> /home/ec2-user/.ssh/authorized_keys;
            /opt/aws/bin/cfn-signal --exit-code 0 --resource DockerMgr --region ${AWS::Region} --stack ${AWS::StackName};
      Tags:
        -
          Key: Name
          Value: !Sub ${EnvironmentName}-SwarmMgr

  MgrRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-EC2-SSM-Params-Role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Role for EC2 to read/write SSM Parameters via CLI
      MaxSessionDuration: 3600 # Role active for 1 hour (Implies no scaling after an hour - spot instances!)
      Path: /
      Policies: 
        - PolicyName: !Sub ${EnvironmentName}-EC2-SSM-Params-Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:AddTagsToResource
                  - ssm:GetParameters
                  - ssm:GetParameter
                  - ssm:RemoveTagsFromResource
                Resource: arn:aws:ssm:*:*:parameter/*
      Tags: 
        -
          Key: Name
          Value: !Sub ${EnvironmentName}-TempSSMRole
  
  MyProfile:
    DependsOn: MgrRole
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Sub ${EnvironmentName}-Access-SSM-Params-Profile
      Path: /
      Roles: 
        - !Sub ${EnvironmentName}-EC2-SSM-Params-Role

Outputs:
  DockerMgrPubIp:
    Description: Public IP to reach Docker Swarm Manager
    Value: !GetAtt DockerMgr.PublicIp
