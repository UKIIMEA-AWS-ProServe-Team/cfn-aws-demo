# Create security group that allows Docker traffic between manager and worker
# nodes in the swarm
AWSTemplateFormatVersion: "2010-09-09"  
Resources:  
  SwarmSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Swarm comms
      GroupName: Swarm-SG
      VpcId: vpc-49ba5220
      Tags:
        -
          Key: Name
          Value: Demo-DockerSG

  SwarmIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Node Comms via Mgr
      GroupId: !Ref SwarmSecurityGroup
      IpProtocol: tcp
      FromPort: 2377
      ToPort: 2377
      SourceSecurityGroupId: !Ref SwarmSecurityGroup

  SwarmIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Container network discovery
      GroupId: !Ref SwarmSecurityGroup
      IpProtocol: tcp
      FromPort: 7946
      ToPort: 7946
      SourceSecurityGroupId: !Ref SwarmSecurityGroup

  SwarmIngress3:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Container network discovery
      GroupId: !Ref SwarmSecurityGroup
      IpProtocol: udp
      FromPort: 7946
      ToPort: 7946
      SourceSecurityGroupId: !Ref SwarmSecurityGroup

  SwarmIngress4:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Overlay network traffic - container ingress
      GroupId: !Ref SwarmSecurityGroup
      IpProtocol: udp
      FromPort: 4789
      ToPort: 4789
      SourceSecurityGroupId: !Ref SwarmSecurityGroup

  SwarmIngress5:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Docker Machine
      GroupId: !Ref SwarmSecurityGroup
      IpProtocol: tcp
      FromPort: 2376
      ToPort: 2376
      SourceSecurityGroupId: !Ref SwarmSecurityGroup