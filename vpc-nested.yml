AWSTemplateFormatVersion: "2010-09-09"

Description:  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a pair of NAT gateways (one in each AZ),
  and default routes for them in the private subnets.

Parameters:
  EnvironmentName:
    Description: Environment Name
    Type: String

  VpcCIDR:
    Description: VPC CIDR Block
    Type: String

  PublicSubnet1CIDR:
    Type: String

  PublicSubnet2CIDR:
    Type: String

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicRoutes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
        -
          Key: "Name"
          Value: !Join ["-", [!Ref EnvironmentName, no-ingress-sg]]
      GroupName: !Sub ${EnvironmentName}-no-ingress-sg
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC
      
  SSHIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      Tags:
        -
          Key: "Name"
          Value: !Join ["-", [!Ref EnvironmentName, ssh-sg]]
      VpcId: !Ref VPC
      GroupDescription: "Security Group to allow SSH Ingress"
      GroupName: !Sub ${EnvironmentName}-SSH-ingress-sg
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          Description: "SSH Ingress"
          FromPort: 22
          ToPort: 22
          
  WebIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
        -
          Key: Name
          Value: !Join ["-", [!Ref EnvironmentName, web-sg]]
      VpcId: !Ref VPC
      GroupDescription: "Security Group to allow common Web Ports"
      GroupName: !Sub ${EnvironmentName}-Web-ingress-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: "Standard HTTP"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          Description: "Standard HTTPS"
          CidrIp: 0.0.0.0/0

  DockerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
        -
          Key: Name
          Value: !Sub ${EnvironmentName}-docker-sg
      VpcId: !Ref VPC
      GroupDescription: "Security Group to allow Docker Ports"
      GroupName: !Sub ${EnvironmentName}-docker-sg
      SecurityGroupIngress:
        # - IpProtocol: tcp
        #   FromPort: 2376
        #   ToPort: 2376
        #   CidrIp: !Ref VpcCIDR
        #   Description: "Docker Machine"
        # - IpProtocol: tcp
        #   FromPort: 2377
        #   ToPort: 2377
        #   CidrIp: !Ref VpcCIDR
        #   Description: "Docker Swarm Node Comms"
        # - IpProtocol: tcp
        #   FromPort: 7946
        #   ToPort: 7946
        #   CidrIp: !Ref VpcCIDR
        #   Description: "Container Network Discovery"
        # - IpProtocol: udp
        #   FromPort: 7946
        #   ToPort: 7946
        #   CidrIp: !Ref VpcCIDR
        #   Description: "Container Network Discovery"
        - IpProtocol: -1
          CidrIp: !Ref VpcCIDR
          Description: "Quick override to allow testing from Jenkins"


Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2

  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup

  DockerSecurityGroup:
    Description: "Security Group to allow Docker Ports"
    Value: !Ref DockerSecurityGroup

  SSHIngressSecurityGroup:
    Description: "Security Group to allow SSH Ingress"
    Value: !Ref SSHIngressSecurityGroup

  WebIngressSecurityGroup:
    Description: "Security Group for some web ports"
    Value: !Ref  WebIngressSecurityGroup

  WorkerSecurityGroups:
    Description: List of SG used during testing
    Value: !Join [",", [!Ref DockerSecurityGroup, !Ref SSHIngressSecurityGroup, !Ref WebIngressSecurityGroup]]