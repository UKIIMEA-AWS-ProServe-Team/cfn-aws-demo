
# Demo: Not for production use, not production quality!

AWSTemplateFormatVersion: "2010-09-09"
Parameters:

  EnvironmentName:
    Description: A *UNIQUE* name that does not already exist when CFN runs.
    Type: String
    Default: DEMO

  NumberOfWorkerNodes:
    Description: Minimum number of worker nodes desired
    Type: Number
    Default: 2
    MaxValue: 10

  SourceS3BucketName:
    Description: Source S3 bucket name
    Type: String
    Default: cfn-demo-ianp

  SourceS3BucketURI:
    Description: Base URI for source S3 bucket location
    Type: String
    Default: https://s3-eu-west-2.amazonaws.com/
  
  LambdaFunctionName:
    Description: Lambda function, zip, etc name
    Type: String
    Default: amicreate

Mappings:
  LinuxBaseAMI:
    eu-west-1: 
      AmazonLinux2: ami-0ea3405d2d2522162
    eu-west-2: 
      AmazonLinux2: ami-032598fcc7e9d1c7a
  Route53:
    HostedZone:
      Domain: cpsdxc.co.uk
      ID: ZR4URMES3MOE4
  CIDRBlocks:
    VPC:
      Range: 10.192.0.0/16
    Public:
      Subnet1: 10.192.10.0/24
      Subnet2: 10.192.11.0/24
  IPAddresses:
    Manager:
      PrivateIP: 10.192.10.20
    
  Instance:
    Jenkins: 
      Type: t3a.small
      Keypair: automation
    DockerManager:  
      Type: t3a.nano
      Keypair: automation
    DockerWorker:  
      Type: t3a.nano
      Keypair: automation

Resources:

  VPCStack:
    Type: AWS::CloudFormation::Stack
    Properties :
      TemplateURL: !Sub ${SourceS3BucketURI}${SourceS3BucketName}/vpc-nested.yml
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        VpcCIDR: !FindInMap [CIDRBlocks, VPC, Range]
        PublicSubnet1CIDR: !FindInMap [CIDRBlocks, Public, Subnet1]
        PublicSubnet2CIDR: !FindInMap [CIDRBlocks, Public, Subnet2]

  MgrENI:
    Type: AWS::CloudFormation::Stack
    Properties: 
      TemplateURL: !Sub ${SourceS3BucketURI}${SourceS3BucketName}/MgrENI.yml
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        DockerSecurityGroup: !GetAtt VPCStack.Outputs.DockerSecurityGroup
        SSHIngressSecurityGroup: !GetAtt VPCStack.Outputs.SSHIngressSecurityGroup
        WebIngressSecurityGroup: !GetAtt VPCStack.Outputs.WebIngressSecurityGroup
        PublicSubnet1: !GetAtt VPCStack.Outputs.PublicSubnet1
        PrivateIP: !FindInMap [IPAddresses, Manager, PrivateIP] 

  DockerMgr:
    Type: AWS::CloudFormation::Stack
    Properties: 
      TemplateURL: !Sub ${SourceS3BucketURI}${SourceS3BucketName}/EC2-DockerMgr.yml
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        MgrENI: !GetAtt MgrENI.Outputs.MgrENI
        InstanceType: !FindInMap [Instance, DockerManager, Type]
        KeyName: !FindInMap [Instance, DockerManager, Keypair]
        DockerAMI: !FindInMap [LinuxBaseAMI, !Ref "AWS::Region", AmazonLinux2]
        MgrPrivateIP: !FindInMap [IPAddresses, Manager, PrivateIP] 

  WorkerNodeLaunchTemplate:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${SourceS3BucketURI}${SourceS3BucketName}/EC2-WorkerLaunchTemplate.yml
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        DockerSecurityGroup: !GetAtt VPCStack.Outputs.DockerSecurityGroup
        SSHIngressSecurityGroup: !GetAtt VPCStack.Outputs.SSHIngressSecurityGroup
        WebIngressSecurityGroup: !GetAtt VPCStack.Outputs.WebIngressSecurityGroup
        PublicSubnet1: !GetAtt VPCStack.Outputs.PublicSubnet1
        InstanceType: !FindInMap [Instance, DockerWorker, Type]
        KeyName: !FindInMap [Instance, DockerWorker, Keypair]
        DockerAMI: !FindInMap [LinuxBaseAMI, !Ref "AWS::Region", AmazonLinux2]

  ASGGroup:
    DependsOn: 
      - DockerMgr
      - DemoALB
      - WorkerNodeLaunchTemplate
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${SourceS3BucketURI}${SourceS3BucketName}/ASG.yml
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        NumberOfWorkerNodes: !Ref NumberOfWorkerNodes
        WorkerNodeLaunchTemplate: !GetAtt WorkerNodeLaunchTemplate.Outputs.WorkerNodeLaunchTemplate
        PublicSubnet1: !GetAtt VPCStack.Outputs.PublicSubnet1
        PublicSubnet2: !GetAtt VPCStack.Outputs.PublicSubnet2
        ALBTargetGroup: !GetAtt DemoALB.Outputs.ALBTargetGroup

  DemoALB:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${SourceS3BucketURI}${SourceS3BucketName}/ALB.yml
      Parameters:
        PublicSubnet1: !GetAtt VPCStack.Outputs.PublicSubnet1
        PublicSubnet2: !GetAtt VPCStack.Outputs.PublicSubnet2
        WebIngressSecurityGroup: !GetAtt VPCStack.Outputs.WebIngressSecurityGroup
        VPCId: !GetAtt VPCStack.Outputs.VPC
        EnvironmentName: !Ref EnvironmentName

  JenkinsInstance:
    DependsOn: LambdaFunc
    Type: AWS::CloudFormation::Stack
    Properties: 
      TemplateURL: !Sub ${SourceS3BucketURI}${SourceS3BucketName}/jenkins.yml
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        PublicSubnet2: !GetAtt VPCStack.Outputs.PublicSubnet2
        SSHIngressSecurityGroup: !GetAtt VPCStack.Outputs.SSHIngressSecurityGroup
        VPCId: !GetAtt VPCStack.Outputs.VPC
        InstanceType: !FindInMap [Instance, Jenkins, Type]
        KeyName: !FindInMap [Instance, Jenkins, Keypair]

  LambdaFunc:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${SourceS3BucketURI}${SourceS3BucketName}/lambda.yml
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        S3BucketName: !Ref SourceS3BucketName
        LambdaZipName: !Ref LambdaFunctionName

  LambdaExec:
    DependsOn: JenkinsInstance
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${SourceS3BucketURI}${SourceS3BucketName}/lambdaexec.yml
      Parameters:
        LambdaArn: !GetAtt LambdaFunc.Outputs.LambdaArn

  DNSRecord:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub ${SourceS3BucketURI}${SourceS3BucketName}/dnsrecord.yml
      Parameters:
        ALBAddr: !GetAtt DemoALB.Outputs.ALBAddr
        ALBZoneId: !GetAtt DemoALB.Outputs.ALBZoneId
        EnvironmentName: !Ref EnvironmentName
        R53HostedZoneId: !FindInMap [Route53, HostedZone, ID]
        R53Domain: !FindInMap [Route53, HostedZone, Domain]
        JenkinsIp: !GetAtt JenkinsInstance.Outputs.JenkinsPubIp

Outputs:
  WebsiteURI:
    Description: Website URL
    Value: !Sub http://${DNSRecord.Outputs.SiteDNS}/
  JenkinsURI:
    Description: Jenins Management URL
    Value: !Sub http://${DNSRecord.Outputs.JenkinsDNS}:8080/